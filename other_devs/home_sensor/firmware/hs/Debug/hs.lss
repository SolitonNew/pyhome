
hs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006b4  00000000  00000000  0000009c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000001b  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000156  00000000  00000000  0000081b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f5  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001c2  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  00000c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f2  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000038  00000000  00000000  00000d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = (1<<1);
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	87 bb       	out	0x17, r24	; 23
	
    while(1)
    {
        if (PORTB & (1<<1))
  26:	c1 9b       	sbis	0x18, 1	; 24
  28:	02 c0       	rjmp	.+4      	; 0x2e <main+0xc>
			PORTB &= ~(1<<1);
  2a:	c1 98       	cbi	0x18, 1	; 24
  2c:	01 c0       	rjmp	.+2      	; 0x30 <main+0xe>
		else
			PORTB |= (1<<1);
  2e:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  30:	8f e9       	ldi	r24, 0x9F	; 159
  32:	96 e8       	ldi	r25, 0x86	; 134
  34:	a1 e0       	ldi	r26, 0x01	; 1
  36:	81 50       	subi	r24, 0x01	; 1
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	a0 40       	sbci	r26, 0x00	; 0
  3c:	e1 f7       	brne	.-8      	; 0x36 <__CCP__+0x2>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <__SREG__+0x1>
  40:	00 00       	nop
  42:	f1 cf       	rjmp	.-30     	; 0x26 <main+0x4>

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>
